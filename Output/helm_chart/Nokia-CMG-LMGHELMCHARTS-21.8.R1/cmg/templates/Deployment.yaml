{{- $loamBDict := (default dict .Values.loamB) }}
{{- $loamBEnable := ($loamBDict.enable | int) }}
{{- $privileged := ternary "true" "false" (ne (.Values.podsecuritypolicy.privileged | toString) "false") }}
{{- $releaseName := .Release.Name }}
{{- $releaseNamespace := .Release.Namespace }}
{{- $storageDict := (default dict .Values.storage) }}
{{- $pvLogsClaimName := (default "logs-volume-claim" $storageDict.pvLogsClaimName | toString) }}
{{- $nodeSelectorDict := (default dict .Values.nodeSelector) }}
{{- $tolerationsDict := (default dict .Values.tolerations) }}
{{- $awsDict := (default dict .Values.aws) }}
{{- $awsEnable := (default 0 $awsDict.enable | int) }}
{{- $awsSidecarEnable := (default 0 $awsDict.sidecarEnable | int) }}
{{- $awsRegion := (default "us-east-2" $awsDict.region | toString) }}
{{- $imageLoamADict := (default dict .Values.image.loamA) }}
{{- $imageLoamATag := (default .Values.image.tag $imageLoamADict.tag | toString) }}
{{- $imageLoamBDict := (default dict .Values.image.loamB) }}
{{- $imageLoamBTag := (default .Values.image.tag $imageLoamBDict.tag | toString) }}
{{- $affinityDict := (default dict .Values.antiAffinity) }}
{{- $loamAffinity := ternary "soft" "hard" (ne ($affinityDict.loam | toString) "hard") }}
{{- $oamMgAffinity := ternary "soft" "hard" (ne ($affinityDict.loamLmg | toString) "hard") }}
{{- $loggingDict := (default dict .Values.logging) }}
{{- $multusDict := (default dict .Values.multus) }}
{{- $loamMgmtDict := (default dict $multusDict.loam) }}
{{- $livenessProbeLoamDict := (default dict .Values.livenessProbe) }}
{{- $livenessProbeLoamEnable := (default 0 $livenessProbeLoamDict.loamEnable | int) }}
{{- $livenessProbeInitialDelay := (default 10 $livenessProbeLoamDict.initialDelay | int) }}
{{- $livenessProbeFailureThreshold := (default 1 $livenessProbeLoamDict.failureThreshold | int) }}
{{- $livenessProbePeriod := (default 30 $livenessProbeLoamDict.period | int) }}
{{- $livenessProbeSuccessThreshold := (default 1 $livenessProbeLoamDict.successThreshold | int) }}
{{- $livenessProbeTimeout := (default 5 $livenessProbeLoamDict.timeout | int) }}
{{- $readinessProbeLoamDict := (default dict .Values.readinessProbe) }}
{{- $readinessProbeLoamEnable := ($readinessProbeLoamDict.loamEnable | int) }}
{{- $readinessProbeInitialDelay := (default 15 $readinessProbeLoamDict.initialDelay | int) }}
{{- $readinessProbeFailureThreshold := (default 2 $readinessProbeLoamDict.failureThreshold | int) }}
{{- $readinessProbePeriod := (default 30 $readinessProbeLoamDict.period | int) }}
{{- $readinessProbeSuccessThreshold := (default 1 $readinessProbeLoamDict.successThreshold | int) }}
{{- $readinessProbeTimeout := (default 5 $readinessProbeLoamDict.timeout | int) }}
{{- $vaultDict := (default dict .Values.vault) }}
{{- $vaultEnable := ($vaultDict.enable | int) }}
{{- $ipv6Sysctl := (default false .Values.ipv6Sysctl) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loam-a-v1
spec:
  replicas: 1
  selector:
    matchLabels:
      name: loam-a
  template:
    metadata:
      labels:
        name: loam-a
        version: v1
{{- if .Values.uuid }}
        uuid: {{ .Values.uuid }}
{{- end }}
{{- if $loamMgmtDict }}
      annotations:
        k8s.v1.cni.cncf.io/networks: {{ $releaseNamespace }}/loam-a-mgmt
{{- end }}
    spec:
      affinity:
        podAntiAffinity:
{{- if or (eq $oamMgAffinity "soft") (eq $loamAffinity "soft") }}
          preferredDuringSchedulingIgnoredDuringExecution:
{{- if and (eq $loamAffinity "soft") (eq $loamBEnable 1) }}
          - weight: 100
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              namespaces: [{{ .Release.Namespace }}]
              labelSelector:
                matchExpressions:
                - key: name
                  operator: In
                  values:
                  - loam-b
{{- end }}
{{- if eq $oamMgAffinity "soft" }}
          - weight: 100
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              namespaces: [{{ .Release.Namespace }}]
              labelSelector:
                matchExpressions:
                - key: name
                  operator: In
                  values:
                  - lmg
{{- end }}
{{- end }}
{{- if or (eq $oamMgAffinity "hard") (eq $loamAffinity "hard") }}
          requiredDuringSchedulingIgnoredDuringExecution:
{{- if and (eq $loamAffinity "hard") (eq $loamBEnable 1) }}
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - loam-b
            topologyKey: "kubernetes.io/hostname"
            namespaces: [{{ .Release.Namespace }}]
{{- end }}
{{- if eq $oamMgAffinity "hard" }}
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - lmg
            topologyKey: "kubernetes.io/hostname"
            namespaces: [{{ .Release.Namespace }}]
{{- end }}
{{- end }}
      volumes:
      - name: shared-data
        persistentVolumeClaim:
          claimName: {{ $pvLogsClaimName }}
{{- range $i, $j := $storageDict.cfAInfo }}
{{- $volName := (print "cf" (add1 $i | toString) "-volume" | toString) }}
{{- $pvcName := (default (print "cf" (add1 $i | toString) "-a-volume-claim") $j.pvcName | toString) }}
      - name: {{ $volName }}
        persistentVolumeClaim:
          claimName: {{ $pvcName }}
{{- end }}
{{- $nascDict := (default dict .Values.nasc) }}
{{- if $nascDict.enable }}
      - name: config-sidecar
        configMap:
         name: stats-sidecar-loam
{{- end }}
{{- $rtScheduling_enable := (.Values.rtScheduling.enable | int) }}
{{- if eq $rtScheduling_enable 1 }}
      - name: host-cgroup-cpu
        hostPath:
          path: {{ .Values.rtScheduling.cgroupHostPath }}
{{- end }}
      - name: config-volume1
        configMap:
         name: loam-a
      - name: config-volume2
        configMap:
         name: dut-a-cfg
      - name: mgfsroot
      - name: config-volume5
        configMap:
          name: license
{{- if and (eq $vaultEnable 1) ($vaultDict.tlsCaCert)  }}
      - name: tls-secret
        secret:
          secretName: vault-tls-secret
{{- end }}
{{- if $awsSidecarEnable }}
      - name: config-volume6
        configMap:
          name: aws-sidecar
{{- end }}
{{- if eq $privileged "false" }}
      securityContext:
        sysctls:
        - name: net.ipv4.conf.all.rp_filter
          value: "0"
        - name: net.ipv4.conf.default.rp_filter
          value: "0"
{{- end }}
      containers:
      - name: loam-a
        image: {{ .Values.image.repository }}/{{ .Values.image.name }}:{{ $imageLoamATag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- if and (eq $livenessProbeLoamEnable 1) (eq $readinessProbeLoamEnable 1) }}
        startupProbe:
         httpGet:
           path: /healthz/liveness
           port: 8080
           scheme: HTTP
         failureThreshold: 60
         periodSeconds: 10
{{- end }}
{{- if eq $livenessProbeLoamEnable 1 }}
        livenessProbe:
         httpGet:
           path: /healthz/liveness
           port: 8080
           scheme: HTTP
         initialDelaySeconds: {{ $livenessProbeInitialDelay }}
         failureThreshold: {{ $livenessProbeFailureThreshold }}
         periodSeconds: {{ $livenessProbePeriod }}
         successThreshold: {{ $livenessProbeSuccessThreshold }}
         timeoutSeconds: {{ $livenessProbeTimeout }}
{{- end }}
{{- if eq $readinessProbeLoamEnable 1 }}
        readinessProbe:
         httpGet:
           path: /healthz/readiness
           port: 8080
           scheme: HTTP
         initialDelaySeconds: {{ $readinessProbeInitialDelay }}
         failureThreshold: {{ $readinessProbeFailureThreshold }}
         periodSeconds: {{ $readinessProbePeriod }}
         successThreshold: {{ $readinessProbeSuccessThreshold }}
         timeoutSeconds: {{ $readinessProbeTimeout }}
{{- end }}
        volumeMounts:
        - name: shared-data
          mountPath: /logs/
{{- if eq $rtScheduling_enable 1 }}
        - name: host-cgroup-cpu
          mountPath: /hostCgroupCpu/
{{- end }}
        - name: config-volume1
          mountPath: /etc/sysconfig/
        - name: config-volume2
          mountPath: /conf/
{{- range $i, $j := $storageDict.cfAInfo }}
{{- $volName := (print "cf" (add1 $i | toString) "-volume" | toString) }}
{{- $c := add $i 1 }}
        - name: {{ $volName }}
          mountPath: /vol/cflash{{ $c }}/
{{- end }}
        - name: mgfsroot
          mountPath: /mgfsroot/
        - name: config-volume5
          mountPath: /license/
{{- if and (eq $vaultEnable 1) ($vaultDict.tlsCaCert)  }}
        - name: tls-secret
          mountPath: /vault/ssl
{{- end }}
        command:
        - /bin/sh
        - -c
        - >-
{{- if $loamMgmtDict }}
          ip rule add from all to {{ $loamMgmtDict.ip.active }} table 1000;
          ip rule add from {{ $loamMgmtDict.ip.active }} to all table 1000;
          ip route del {{ $loamMgmtDict.subnet }}/{{ $loamMgmtDict.netMask }} dev net1;
          ip route add {{ $loamMgmtDict.subnet }}/{{ $loamMgmtDict.netMask }} dev net1 proto kernel scope link src {{ $loamMgmtDict.ip.loamA }} table 1000;
{{- if $loamMgmtDict.gw }}
          ip route add default via {{ $loamMgmtDict.gw }} table 1000;
{{- end }}
{{- end }}
{{- if $ipv6Sysctl }}
          sysctl -w net.ipv6.conf.all.disable_ipv6=0;
{{- end }}
          ./cpm /etc/sysconfig/loam.cfg
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_CNF_UUID
{{- if .Values.uuid }}
          value: {{ .Values.uuid }}
{{- end }}
{{- if $awsEnable }}
        - name: AWS_DEFAULT_REGION
          value: "{{ $awsRegion }}"
{{- end }}
        securityContext:
{{- if eq $privileged "false" }}
          privileged: false
          capabilities:
            add:
            - SYS_NICE
            - SYS_RESOURCE
            - NET_ADMIN
            - NET_RAW
            - NET_BIND_SERVICE
{{- else }}
          privileged: true
{{- end }}
        resources:
          requests:
            cpu: {{ .Values.resources.loam.cpu }}
            memory: {{ .Values.resources.loam.memory }}
          limits:
            cpu: {{ .Values.resources.loam.cpu }}
            memory: {{ .Values.resources.loam.memory }}
{{- if $loggingDict.enable }}
      - name: logging
        image: {{ $loggingDict.imageRepository }}/{{ $loggingDict.imageName }}:{{ $loggingDict.imageTag }}
        imagePullPolicy: {{ $loggingDict.imagePullPolicy }}
        volumeMounts:
        - name: mgfsroot
          mountPath: /mgfsroot/
        resources:
          requests:
            cpu: {{ .Values.resources.logging.cpu }}
            memory: {{ .Values.resources.logging.memory }}
          limits:
            cpu: {{ .Values.resources.logging.cpu }}
            memory: {{ .Values.resources.logging.memory }}
{{- end }}
{{- if $nascDict.enable }}
      - name: nok-analytics
        image: {{ $nascDict.imageRepository }}/{{ $nascDict.imageName }}:{{ $nascDict.imageTag }}
        imagePullPolicy: {{ $nascDict.imagePullPolicy }}
        volumeMounts:
        - name: config-sidecar
          mountPath: /etc/stats-exporter-sidecar/
        terminationMessagePath: "/tmp/nasc-end.log"
        resources:
          requests:
            cpu: {{ .Values.resources.nasc.cpu }}
            memory: {{ .Values.resources.nasc.memory }}
          limits:
            cpu: {{ .Values.resources.nasc.cpu }}
            memory: {{ .Values.resources.nasc.memory }}
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: CONFIG_READ_INTERVAL
          value: "{{ $nascDict.configReadInterval }}"
{{- end }}
{{- if $awsSidecarEnable }}
      - name: aws-sidecar
        image: {{ $awsDict.imageRepository }}/{{ $awsDict.imageName }}:{{ $awsDict.imageTag }}
        imagePullPolicy: {{ $awsDict.imagePullPolicy }}
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: AWSREGION
          value: "{{ $awsRegion }}"
{{- if $awsDict.interval }}
        - name: SIDECAR_INTERVAL
          value: "{{ $awsDict.interval }}"
{{- end }}
        volumeMounts:
        - name: config-volume6
          mountPath: /conf/
        resources:
          requests:
            cpu: {{ .Values.resources.aws.cpu }}
            memory: {{ .Values.resources.aws.memory }}
          limits:
            cpu: {{ .Values.resources.aws.cpu }}
            memory: {{ .Values.resources.aws.memory }}
{{- end }}
      serviceAccountName: {{ .Release.Namespace }}-serviceaccount
{{- if $nodeSelectorDict.loamA }}
      nodeSelector:
{{- range $nodeSelectorDict.loamA }}
        {{ .key }}: {{ .value }}
{{- end }}
{{- end }}
{{- if $tolerationsDict.loamA }}
      tolerations:
{{- range $tolerationsDict.loamA }}
      - key: {{ .key }}
{{- if .value }}
        value: {{ .value }}
{{- end }}
{{- if .operator }}
        operator: {{ .operator }}
{{- end }}
{{- if .effect }}
        effect: {{ .effect }}
{{- end }}
{{- if .tolerationSeconds }}
        tolerationSeconds: {{ .tolerationSeconds }}
{{- end }}
{{- end }}
{{- end }}

---
{{- if eq $loamBEnable 1 }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loam-b-v1
spec:
  replicas: 1
  selector:
    matchLabels:
      name: loam-b
  template:
    metadata:
      labels:
        name: loam-b
        version: v1
{{- if .Values.uuid }}
        uuid: {{ .Values.uuid }}
{{- end }}
{{- if $loamMgmtDict }}
      annotations:
        k8s.v1.cni.cncf.io/networks: {{ $releaseNamespace }}/loam-b-mgmt
{{- end }}
    spec:
      affinity:
        podAntiAffinity:
{{- if or (eq $oamMgAffinity "soft") (eq $loamAffinity "soft") }}
          preferredDuringSchedulingIgnoredDuringExecution:
{{- if eq $loamAffinity "soft" }}
          - weight: 100
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              namespaces: [{{ .Release.Namespace }}]
              labelSelector:
                matchExpressions:
                - key: name
                  operator: In
                  values:
                  - loam-a
{{- end }}
{{- if eq $oamMgAffinity "soft" }}
          - weight: 100
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              namespaces: [{{ .Release.Namespace }}]
              labelSelector:
                matchExpressions:
                - key: name
                  operator: In
                  values:
                  - lmg
{{- end }}
{{- end }}
{{- if or (eq $oamMgAffinity "hard") (eq $loamAffinity "hard") }}
          requiredDuringSchedulingIgnoredDuringExecution:
{{- if eq $loamAffinity "hard" }}
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - loam-a
            topologyKey: "kubernetes.io/hostname"
            namespaces: [{{ .Release.Namespace }}]
{{- end }}
{{- if eq $oamMgAffinity "hard" }}
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - lmg
            topologyKey: "kubernetes.io/hostname"
            namespaces: [{{ .Release.Namespace }}]
{{- end }}
{{- end }}
      volumes:
      - name: shared-data
        persistentVolumeClaim:
          claimName: {{ $pvLogsClaimName }}
{{- range $i, $j := $storageDict.cfBInfo }}
{{- $volName := (print "cf" (add1 $i | toString) "-volume" | toString) }}
{{- $pvcName := (default (print "cf" (add1 $i | toString) "-b-volume-claim") $j.pvcName | toString) }}
      - name: {{ $volName }}
        persistentVolumeClaim:
          claimName: {{ $pvcName }}
{{- end }}
{{- if $nascDict.enable }}
      - name: config-sidecar
        configMap:
         name: stats-sidecar-loam
{{- end }}
{{- $rtScheduling_enable := (.Values.rtScheduling.enable | int) }}
{{- if eq $rtScheduling_enable 1 }}
      - name: host-cgroup-cpu
        hostPath:
          path: {{ .Values.rtScheduling.cgroupHostPath }}
{{- end }}
      - name: config-volume1
        configMap:
         name: loam-b
      - name: config-volume2
        configMap:
         name: dut-a-cfg
      - name: mgfsroot
      - name: config-volume5
        configMap:
          name: license
{{- if and (eq $vaultEnable 1) ($vaultDict.tlsCaCert)  }}
      - name: tls-secret
        secret:
          secretName: vault-tls-secret
{{- end }}
{{- if $awsSidecarEnable }}
      - name: config-volume6
        configMap:
          name: aws-sidecar
{{- end }}
{{- if eq $privileged "false" }}
      securityContext:
        sysctls:
        - name: net.ipv4.conf.all.rp_filter
          value: "0"
        - name: net.ipv4.conf.default.rp_filter
          value: "0"
{{- end }}
      containers:
      - name: loam-b
        image: {{ .Values.image.repository }}/{{ .Values.image.name }}:{{ $imageLoamBTag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- if and (eq $livenessProbeLoamEnable 1) (eq $readinessProbeLoamEnable 1) }}
        startupProbe:
         httpGet:
           path: /healthz/liveness
           port: 8080
           scheme: HTTP
         failureThreshold: 60
         periodSeconds: 10
{{- end }}
{{- if eq $livenessProbeLoamEnable 1 }}
        livenessProbe:
         httpGet:
           path: /healthz/liveness
           port: 8080
           scheme: HTTP
         initialDelaySeconds: {{ $livenessProbeInitialDelay }}
         failureThreshold: {{ $livenessProbeFailureThreshold }}
         periodSeconds: {{ $livenessProbePeriod }}
         successThreshold: {{ $livenessProbeSuccessThreshold }}
         timeoutSeconds: {{ $livenessProbeTimeout }}
{{- end }}
{{- if eq $readinessProbeLoamEnable 1 }}
        readinessProbe:
         httpGet:
           path: /healthz/readiness
           port: 8080
           scheme: HTTP
         initialDelaySeconds: {{ $readinessProbeInitialDelay }}
         failureThreshold: {{ $readinessProbeFailureThreshold }}
         periodSeconds: {{ $readinessProbePeriod }}
         successThreshold: {{ $readinessProbeSuccessThreshold }}
         timeoutSeconds: {{ $readinessProbeTimeout }}
{{- end }}
        volumeMounts:
        - name: shared-data
          mountPath: /logs/
{{- if eq $rtScheduling_enable 1 }}
        - name: host-cgroup-cpu
          mountPath: /hostCgroupCpu/
{{- end }}
        - name: config-volume1
          mountPath: /etc/sysconfig/
        - name: config-volume2
          mountPath: /conf/
{{- range $i, $j := $storageDict.cfBInfo }}
{{- $volName := (print "cf" (add1 $i | toString) "-volume" | toString) }}
{{- $c := add $i 1 }}
        - name: {{ $volName }}
          mountPath: /vol/cflash{{ $c }}/
{{- end }}
        - name: mgfsroot
          mountPath: /mgfsroot/
        - name: config-volume5
          mountPath: /license/
{{- if and (eq $vaultEnable 1) ($vaultDict.tlsCaCert)  }}
        - name: tls-secret
          mountPath: /vault/ssl
{{- end }}
        command:
        - /bin/sh
        - -c
        - >-
{{- if $loamMgmtDict }}
          ip rule add from all to {{ $loamMgmtDict.ip.active }} table 1000;
          ip rule add from {{ $loamMgmtDict.ip.active }} to all table 1000;
          ip route del {{ $loamMgmtDict.subnet }}/{{ $loamMgmtDict.netMask }} dev net1;
          ip route add {{ $loamMgmtDict.subnet }}/{{ $loamMgmtDict.netMask }} dev net1 proto kernel scope link src {{ $loamMgmtDict.ip.loamB }} table 1000;
{{- if $loamMgmtDict.gw }}
          ip route add default via {{ $loamMgmtDict.gw }} table 1000;
{{- end }}
{{- end }}
{{- if $ipv6Sysctl }}
          sysctl -w net.ipv6.conf.all.disable_ipv6=0;
{{- end }}
          ./cpm /etc/sysconfig/loam.cfg
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_CNF_UUID
{{- if .Values.uuid }}
          value: {{ .Values.uuid }}
{{- end }}
{{- if $awsEnable }}
        - name: AWS_DEFAULT_REGION
          value: "{{ $awsRegion }}"
{{- end }}
        securityContext:
{{- if eq $privileged "false" }}
          privileged: false
          capabilities:
            add:
            - SYS_NICE
            - SYS_RESOURCE
            - NET_ADMIN
            - NET_RAW
            - NET_BIND_SERVICE
{{- else }}
          privileged: true
{{- end }}
        resources:
          requests:
            cpu: {{ .Values.resources.loam.cpu }}
            memory: {{ .Values.resources.loam.memory }}
          limits:
            cpu: {{ .Values.resources.loam.cpu }}
            memory: {{ .Values.resources.loam.memory }}
{{- if $loggingDict.enable }}
      - name: logging
        image: {{ $loggingDict.imageRepository }}/{{ $loggingDict.imageName }}:{{ $loggingDict.imageTag }}
        imagePullPolicy: {{ $loggingDict.imagePullPolicy }}
        volumeMounts:
        - name: mgfsroot
          mountPath: /mgfsroot/
        resources:
          requests:
            cpu: {{ .Values.resources.logging.cpu }}
            memory: {{ .Values.resources.logging.memory }}
          limits:
            cpu: {{ .Values.resources.logging.cpu }}
            memory: {{ .Values.resources.logging.memory }}
{{- end }}
{{- if $nascDict.enable }}
      - name: nok-analytics
        image: {{ $nascDict.imageRepository }}/{{ $nascDict.imageName }}:{{ $nascDict.imageTag }}
        imagePullPolicy: {{ $nascDict.imagePullPolicy }}
        volumeMounts:
        - name: config-sidecar
          mountPath: /etc/stats-exporter-sidecar/
        terminationMessagePath: "/tmp/nasc-end.log"
        resources:
          requests:
            cpu: {{ .Values.resources.nasc.cpu }}
            memory: {{ .Values.resources.nasc.memory }}
          limits:
            cpu: {{ .Values.resources.nasc.cpu }}
            memory: {{ .Values.resources.nasc.memory }}
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: CONFIG_READ_INTERVAL
          value: "{{ $nascDict.configReadInterval }}"
{{- end }}
{{- if $awsSidecarEnable }}
      - name: aws-sidecar
        image: {{ $awsDict.imageRepository }}/{{ $awsDict.imageName }}:{{ $awsDict.imageTag }}
        imagePullPolicy: {{ $awsDict.imagePullPolicy }}
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: AWSREGION
          value: "{{ $awsRegion }}"
{{- if $awsDict.interval }}
        - name: SIDECAR_INTERVAL
          value: "{{ $awsDict.interval }}"
{{- end }}
        volumeMounts:
        - name: config-volume6
          mountPath: /conf/
        resources:
          requests:
            cpu: {{ .Values.resources.aws.cpu }}
            memory: {{ .Values.resources.aws.memory }}
          limits:
            cpu: {{ .Values.resources.aws.cpu }}
            memory: {{ .Values.resources.aws.memory }}
{{- end }}
      serviceAccountName: {{ .Release.Namespace }}-serviceaccount
{{- if $nodeSelectorDict.loamB }}
      nodeSelector:
{{- range $nodeSelectorDict.loamB }}
        {{ .key }}: {{ .value }}
{{- end }}
{{- end }}
{{- if $tolerationsDict.loamB }}
      tolerations:
{{- range $tolerationsDict.loamB }}
      - key: {{ .key }}
{{- if .value }}
        value: {{ .value }}
{{- end }}
{{- if .operator }}
        operator: {{ .operator }}
{{- end }}
{{- if .effect }}
        effect: {{ .effect }}
{{- end }}
{{- if .tolerationSeconds }}
        tolerationSeconds: {{ .tolerationSeconds }}
{{- end }}
{{- end }}
{{- end }}

---
{{- end }}
