{{- $podsecuritypolicyDict := (default dict .Values.podsecuritypolicy) }}
{{- $openshiftDict := (default dict .Values.openshift) }}
{{- $openshiftEnable := (default false $openshiftDict.enable) }}
{{- if not $openshiftEnable }}
{{- if $podsecuritypolicyDict.create }}
{{- $privileged := ternary "true" "false" (ne ($podsecuritypolicyDict.privileged | toString) "false") }}
{{- $xdpDict := (default dict .Values.multus.xdp) }}
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
{{- if $podsecuritypolicyDict.name }}
  name: {{ $podsecuritypolicyDict.name }}
{{- else }}
  name: {{ .Release.Namespace }}-psp
{{- end }}
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
spec:
{{- if eq $privileged "true" }}
  privileged: true
  allowPrivilegeEscalation: true
  allowedCapabilities:
  - '*'
  volumes:
  - '*'
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  hostIPC: true
  hostPID: true
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
{{- else }}
  privileged: false
  allowPrivilegeEscalation: false
  allowedCapabilities:
  - SYS_NICE
  - SYS_RESOURCE
{{- if $xdpDict.enable }}
  - SYS_ADMIN
{{- end }}
  - NET_ADMIN
  - NET_RAW
  - NET_BIND_SERVICE
  allowedUnsafeSysctls:
  - net.ipv4.conf.*
  volumes:
  - configMap
  - emptyDir
  - projected
  - secret
  - downwardAPI
  - persistentVolumeClaim
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1
      max: 65535
{{- end }}

---
{{- end }}
{{- end }}
